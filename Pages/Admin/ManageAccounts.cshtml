@page
@model WebApplication1.Pages.Admin.ManageAccountsModel
@{
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Manage Accounts";
}

<h1>@ViewData["Title"]</h1>

<!-- Success/Error Messages -->
@if (TempData.ContainsKey("SuccessMessage"))
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData.ContainsKey("ErrorMessage"))
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}


<!-- Search and Filter Section -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="form-inline">
        <input type="text" id="searchBox" name="searchTerm" value="@Request.Query["searchTerm"]" class="form-control mr-2" placeholder="Search by email" onkeyup="debounceSearch()">
        <select id="roleFilter" class="form-control mr-3" name="roleFilter" onchange="filterByRole()">
            <option value="All">All</option>
            <option value="Admin">Admin</option>
            <option value="Distributor">Distributor</option>
            <option value="AdditionalUser">Additional User</option>
            <option value="Client">Client</option>

        </select>
    </div>
    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createUserModal">Create New User</button>
</div>

<hr />

<!-- Display All Users with Password Reset Option -->
<h3>Existing Users</h3>

<!-- Existing Users Table -->
<table class="table table-bordered table-striped table-hover">
    <thead class="thead-dark">
        <tr>
            <th>Email</th>
            <th>Role</th>
            <th>Lock Status</th> 
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="userTable">
        @foreach (var user in Model.Users)
            {
                var isLockedOut = Model.UserLockStatus.ContainsKey(user.Id) && Model.UserLockStatus[user.Id];

            <tr class="user-row" data-role="@user.Role">
                <td>@user.Email</td>
                <td>@user.Role</td>
                <td>
                    @if (isLockedOut)
                    {
                        <span class="text-danger">Locked</span>
                    }
                    else
                    {
                        <span>Active</span>
                    }
                </td>
                <td>
                    <button type="button" class="btn btn-warning btn-sm"
                            data-bs-toggle="modal"
                            data-bs-target="#resetPasswordModal"
                            data-email="@user.Email"
                            data-userid="@user.Id">
                        Reset Password
                    </button>
                    @if (isLockedOut)
                    {
                        <button class="btn btn-success btn-sm" onclick="unlockUser('@user.Id')">Unlock</button>
                    }
                    else
                    {
                        <button class="btn btn-danger btn-sm" onclick="lockUser('@user.Id')">Lock</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <li class="page-item @(Model.CurrentPage <= 1 ? "disabled" : "")">
            <a class="page-link" href="?searchTerm=@Request.Query["searchTerm"]&pageNumber=@(Model.CurrentPage - 1)&roleFilter=@Request.Query["roleFilter"]" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                <a class="page-link" href="?searchTerm=@Request.Query["searchTerm"]&pageNumber=@i&roleFilter=@Request.Query["roleFilter"]">@i</a>
            </li>
        }
        <li class="page-item @(Model.CurrentPage >= Model.TotalPages ? "disabled" : "")">
            <a class="page-link" href="?searchTerm=@Request.Query["searchTerm"]&pageNumber=@(Model.CurrentPage + 1)&roleFilter=@Request.Query["roleFilter"]" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

<!-- Modals -->
<!-- Create New User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createUserModalLabel">Create New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="CreateUser">
                    <div class="form-group">
                        <label asp-for="NewUser.Email">Email</label>
                        <input asp-for="NewUser.Email" class="form-control" />
                        <span asp-validation-for="NewUser.Email" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="NewUser.Role">Role</label>
                        <select asp-for="NewUser.Role" class="form-control" id="roleSelect" onchange="togglePasswordField()">
                            <option value="Admin">Admin</option>
                            <option value="Distributor">Distributor</option>
                            <option value="Client">Client</option>
                        </select>
                        <span asp-validation-for="NewUser.Role" class="text-danger"></span>
                    </div>
                    <div class="form-group" id="passwordField">
                        <label asp-for="NewUser.Password">Password</label>
                        <input asp-for="NewUser.Password" class="form-control" type="password" />
                        <span asp-validation-for="NewUser.Password" class="text-danger"></span>
                    </div>
                    <button type="submit" class="btn btn-success">Create User</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Reset Password Modal -->
<div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetPasswordModalLabel">Reset Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="ResetPassword">
                    <input type="hidden" id="userId" name="userId" />
                    <input type="hidden" id="email" name="email" />
                    <p>Are you sure you want to reset the password for <span id="resetEmail"></span>?</p>
                    <button type="submit" class="btn btn-warning">Reset Password</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>let debounceTimer;
        // Pass data to reset password modal
        var resetPasswordModal = document.getElementById('resetPasswordModal');
        resetPasswordModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget; // Button that triggered the modal
            var email = button.getAttribute('data-email');
            var userId = button.getAttribute('data-userid');
            var modal = this;

            // Update the modal's content with email and userId
            modal.querySelector('#resetEmail').textContent = email;
            modal.querySelector('#email').value = email;
            modal.querySelector('#userId').value = userId;
        });
        function togglePasswordField() {
            var roleSelect = document.getElementById("roleSelect");
            var passwordField = document.getElementById("passwordField");
            if (roleSelect.value === "Client") {
                passwordField.style.display = "none"; // Hide password field for Client
            } else {
                passwordField.style.display = "block"; // Show password field for Admin and Distributor
            }
        }

        // Initialize when the page loads
        togglePasswordField();

        function debounceSearch() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                searchUsers();
            }, 500); // Delay search by 500ms
        }

        function filterByRole() {
            var selectedRole = document.getElementById('roleFilter').value;
            var searchTerm = document.getElementById('searchBox').value;
            window.location.href = `?searchTerm=${searchTerm}&roleFilter=${selectedRole}`;
        }

        function searchUsers() {
            var searchTerm = document.getElementById('searchBox').value;
            var selectedRole = document.getElementById('roleFilter').value;
            window.location.href = `?searchTerm=${searchTerm}&roleFilter=${selectedRole}`;
        }
        function unlockUser(userId) {
            if (confirm('Are you sure you want to unlock this user?')) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value; // Fetch the anti-forgery token

                fetch(`/Admin/ManageAccounts?handler=UnlockUser`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token // Include the token in the request headers
                    },
                    body: JSON.stringify({ "UserId": userId })  // Ensure this is properly formatted JSON
                }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('User unlocked successfully.');
                            location.reload();
                        } else {
                            alert('Error unlocking user: ' + data.message);
                        }
                    }).catch(error => console.error('Error:', error));
            }
        }

        function lockUser(userId) {
            if (confirm('Are you sure you want to lock this user?')) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value; // Fetch the anti-forgery token

                fetch(`/Admin/ManageAccounts?handler=LockUser`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ "userId": userId }) // Send userId in JSON format
                }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('User locked successfully.');
                            location.reload();
                        } else {
                            alert('Error locking user: ' + data.message);
                        }
                    }).catch(error => console.error('Error:', error));
            }
        }



    </script>
}